{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/social/profiles.ts"],
  "sourcesContent": ["import type { ThirdwebClient } from \"../client/client.js\";\nimport { getThirdwebBaseUrl } from \"../utils/domains.js\";\nimport { getClientFetch } from \"../utils/fetch.js\";\nimport type { SocialProfile } from \"./types.js\";\n\n/**\n * Fetches the wallet's available social profiles.\n * @param args - The arguments to use when fetching the social profiles.\n * @param args.address - The wallet address to fetch the social profiles for.\n * @param args.client - The Thirdweb client.\n * @returns A promise resolving to the array of social profiles for the given address.\n *\n * @example\n * ```ts\n * import { getSocialProfiles } from \"thirdweb/social\";\n * const profiles = await getSocialProfiles({\n *   address: \"0x...\",\n *   client,\n * });\n * ```\n * @social\n * @beta\n */\nexport async function getSocialProfiles(args: {\n  address: string;\n  client: ThirdwebClient;\n}): Promise<SocialProfile[]> {\n  const { address, client } = args;\n\n  const clientFetch = getClientFetch(client);\n  const response = await clientFetch(\n    `${getThirdwebBaseUrl(\"social\")}/v1/profiles/${address}`,\n  );\n\n  if (response.status !== 200) {\n    try {\n      const errorBody = await response.json();\n      throw new Error(`Failed to fetch profile: ${errorBody.message}`);\n    } catch {\n      throw new Error(\n        `Failed to fetch profile: ${response.status}\\n${await response.text()}`,\n      );\n    }\n  }\n\n  return (await response.json()).data as SocialProfile[];\n}\n"],
  "mappings": ";;;;;;;;AAuBA,eAAsB,kBAAkB,MAGvC;AACC,QAAM,EAAE,SAAS,OAAM,IAAK;AAE5B,QAAM,cAAc,eAAe,MAAM;AACzC,QAAM,WAAW,MAAM,YACrB,GAAG,mBAAmB,QAAQ,CAAC,gBAAgB,OAAO,EAAE;AAG1D,MAAI,SAAS,WAAW,KAAK;AAC3B,QAAI;AACF,YAAM,YAAY,MAAM,SAAS,KAAI;AACrC,YAAM,IAAI,MAAM,4BAA4B,UAAU,OAAO,EAAE;IACjE,QAAQ;AACN,YAAM,IAAI,MACR,4BAA4B,SAAS,MAAM;EAAK,MAAM,SAAS,KAAI,CAAE,EAAE;IAE3E;EACF;AAEA,UAAQ,MAAM,SAAS,KAAI,GAAI;AACjC;",
  "names": []
}
